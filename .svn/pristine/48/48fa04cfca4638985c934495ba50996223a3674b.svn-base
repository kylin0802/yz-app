import React from 'react'
import Dialog, { withLazy } from '@/components/Dialog'
import { Input, Form, Row, Col, Select, Button, DatePicker, message } from 'antd'
import locale from 'antd/es/date-picker/locale/zh_CN';
import './index.less'
import fetch from '@/services/axios';
import moment from 'moment';

import { get, isFunction } from 'lodash'

const { RangePicker } = DatePicker
const { Option } = Select
const Label = ({ title, children }) => { // 菜单
  return (
    <Form.Item className="examNumber-page-add-examinee-label">
      <label className="examNumber-page-add-examinee-label-item">{title}：</label>
      <span className="examNumber-page-add-examinee-label-span">{children}</span>
    </Form.Item>
  )
}
//重置

const WrapForm = props => {
  const { roomData = [], editorAPI = '', onCancel, siteId = '', onReload, paramsData = {} } = props
  const { getFieldDecorator, resetFields, validateFields } = props.form

  // 参数 name examNumberId
  const requsetEditorExamNumber = param => { // 添加考生
    try {
      fetch.post(editorAPI, param).then(res => {
        if (get(res, 'state') === 10000) {
          message.success(res.message, 1).then(() => {
            onCancel(); //关闭
            isFunction(onReload) && onReload()
            reset()
          });
        } else if (get(res, 'state') === -1) {
          message.error(res.message)
        }
      })
    } catch (err) {
      console.log('报错', err)
    }
  }

  const handleSubmit = e => {
    e.preventDefault()
    // console.log(props)
    validateFields((err, values) => {
      if (!err) {
        let { examNumberId } = props.paramsData
        let { examTime, authorizedTime, examRoom, name, remarks, subject } = values
        let paramTime = { // 时间蹉
          beginTime: parseInt(moment(examTime[0]).valueOf() / 1000),
          endTime: parseInt(moment(examTime[1]).valueOf() / 1000),
          authorizedBeginTime: parseInt(moment(authorizedTime[0]).valueOf() / 1000),
          authorizedEndTime: parseInt(moment(authorizedTime[1]).valueOf() / 1000)
        };

        const examNumber = {
          ...paramTime,
          name,
          remarks,
          subject,
          examRoom: JSON.parse(examRoom),
          examNumberId
        }
        requsetEditorExamNumber({ siteId, examNumber })
      }
    })
  }

  const reset = e => {
    resetFields(['name', 'remarks', 'sex', 'examTime', 'authorizedTime', 'subject', 'examRoom'])

  }

  return (
    <Form className="examNumber-page-add-examinee" onSubmit={handleSubmit}>
      <Row>
        <Col span={12}>
          <Label title="考场名称">
            {getFieldDecorator('name', { initialValue: paramsData.name })(<Input />)}
          </Label>
          <Label title="考试科目">
            {getFieldDecorator('subject', { initialValue: paramsData.subject })(<Input />)}
          </Label>
          <Label title="授权考试时间">
            {/* 
https://www.jianshu.com/p/9118505c6d48 踩坑
*/}
            {getFieldDecorator('examTime',
              {
                initialValue: !!paramsData.endTime || !!paramsData.beginTime ?
                  [moment(paramsData.beginTime * 1000),
                  moment(paramsData.endTime * 1000)]
                  : null
              })
              (<RangePicker
                showTime={{ format: 'HH:mm' }}
                format="YYYY-MM-DD HH:mm"
                locale={locale}
                placeholder={['开始时间', '结束时间']}
              />)
            }
          </Label>
          <Label title="授权通过时间">
            {getFieldDecorator('authorizedTime',
              {
                initialValue: !!paramsData.authorizedBeginTime || !!paramsData.authorizedEndTime ?
                  [moment(paramsData.authorizedBeginTime * 1000),
                  moment(paramsData.authorizedEndTime * 1000)]
                  : null
              }
            )(<RangePicker
              showTime={{ format: 'HH:mm' }}
              format="YYYY-MM-DD HH:mm"
              locale={locale}
              placeholder={['开始时间', '结束时间']}
            />)}

          </Label>
        </Col>
        <Col span={12}>

          <Label title="考试">
            {getFieldDecorator('examRoom', { initialValue: `${JSON.stringify(paramsData.examRoom)}` })(<Select>
              {!!roomData.length && roomData.map(item => (<Option value={JSON.stringify(item)} key={item.examRoomId} >{item.name}</Option>))}
            </Select>)}
          </Label>
          <Label title="备注">
            {getFieldDecorator('remarks', { initialValue: paramsData.remarks })(<Input />)}
          </Label>
        </Col>
      </Row>
      <hr />
      <Row justify="center" type="flex">
        <Col span={3}>
          <Button type="primary" htmlType="submit">
            保 存
          </Button>
        </Col>
        
      </Row>
    </Form>
  )
}

const Wrap = Form.create()(WrapForm)
function EditorExamNumber(props) {
  return (
    <Dialog title="编辑考场" {...props} footer={null}>
      <Wrap {...props} />
    </Dialog>
  )
}
EditorExamNumber.defaultProps = {
  width: "900px"
}
export default withLazy(EditorExamNumber)