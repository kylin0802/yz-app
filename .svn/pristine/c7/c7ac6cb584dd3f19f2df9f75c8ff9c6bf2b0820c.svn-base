import React, { useState, useCallback, useEffect } from 'react'
import Dialog, { withLazy } from '@/components/Dialog'
import { Input, Form, Row, Col, Upload, Icon, Radio, Button, TreeSelect, message } from 'antd'
import './index.less'
import fetch from '@/services/axios';

import { get, omit, isFunction } from 'lodash'
const radioOptions = [
  { label: '男', value: '男' },
  { label: '女', value: '女' }
]
const { SHOW_CHILD, TreeNode } = TreeSelect

const Label = ({ title, children }) => { // 菜单
  return (
    <Form.Item className="examinee-page-editor-examinee-label">
      <label className="examinee-page-editor-examinee-label-item">{title}</label>
      <span className="examinee-page-editor-examinee-label-span">{children}</span>
    </Form.Item>
  )
}
//重置

const WrapForm = props => {
  const {examSiteSelectData, onReload ,API={}, onCancel, examineeData={}} = props
  const { getFieldDecorator, resetFields, validateFields } = props.form


  const [imageUrl, setImageUrl] = useState(null)
  const loading = false
  const [fileList, setFileList] = useState([])
  const [fiterSelectData, setFiterSelectData]= useState([])
  const tProps = {
    showCheckedStrategy: SHOW_CHILD,
    searchPlaceholder: '请输入考生座位',
    treeCheckable: true,
    style: {
      width: '100%',
    },
  };

 // 参数 name examNumberId
  const childrenTree = (childrenItem, index) => (
    <TreeNode value={
      `${childrenItem.examNumberId}&&${childrenItem.name}&&${childrenItem.subject}`
    } title={childrenItem.name+ '-' + childrenItem.subject} key={childrenItem.examNumberId} />)
  function beforeUpload(file) { //判断是否上传
    return false;
  }

 useEffect(
    () => {
      
      let {examNumberBrief, photoPath} = props.examineeData
      let fiterData = !!examNumberBrief &&!!examNumberBrief.length &&examNumberBrief.map((childrenItem) => {
        return `${childrenItem.examNumberId}&&${childrenItem.examNumberName}&&${childrenItem.subject}`
      })
      const imgURL = `/yzSmartGate/common/${photoPath}`
      setImageUrl(imgURL)
      setFiterSelectData(fiterData)
      
      // return fiterData
    }, [JSON.stringify(examineeData)]
  )

  const requsetEditorExaminee = param => { // 添加考生
    try {
      fetch.post(API, param).then(res => {
        if(get(res, 'state')=== 10000) {
            message.success('修改成功').then(() => {
              onCancel(); //关闭
              isFunction(onReload) &&  onReload()
              reset()
            });
        } else if(get(res,'state') === -1) {
          message.error(res.message)
        }
      })
    }catch(err) {
      console.log('报错', err)
    } 
  }

  const handleSubmit = e => {
    e.preventDefault()
    // console.log(props)
    validateFields((err, values) => {
      if (!err) {
         let valueObj = {...values, headPhoto:fileList[0]} // 照片合并
        //  console.log(valueObj)
         let {examNumberBrief}= valueObj
         let param = []    
        param = examNumberBrief.map((item, index) => { // java 要的格式
           let examNumberId = `examNumberBrief[${index}].examNumberId`
           let examNumberName = `examNumberBrief[${index}].examNumberName`
           let subject =`examNumberBrief[${index}].subject`
           let itemSplit = item.split('&&')
           valueObj[examNumberId] = itemSplit[0] || ''
           valueObj[examNumberName] = itemSplit[1] || ''
           valueObj[subject] = itemSplit[2]|| ''  
         })
         let examineeInfo = omit(valueObj, 'examNumberBrief')  //删除字段
         let formData = new FormData()
         for(let itemKey in examineeInfo) {
           formData.append([itemKey], examineeInfo[itemKey])
         }
         requsetEditorExaminee(formData)
      }
    })
  }

  const reset = e => {
    resetFields(['examineeId', 'seatNo','sex', 'examNumberBrief', 'name', 'idCard', 'phone'])
    setImageUrl(null)
    setFileList([])
  }

  const handleChange = useCallback(
    (fileObject) => {
      let reader = new FileReader()
      reader.readAsDataURL(fileObject.file)
      reader.onload = () => {
        setImageUrl(reader.result)
      }
      // console.log(fileObject.file)
      setFileList([fileObject.file])
      // setImageUrl()   
    }, [imageUrl])
  return (
    <Form className="examinee-page-editor-examinee" onSubmit={handleSubmit}>
      <Row gutter={[12]}>
        <Col span={8} push={2}>
          <Upload
            name="avatar"
            fileList={fileList}
            listType="picture-card"
            className="avatar-uploader"
            showUploadList={false}
            beforeUpload={beforeUpload}
            onChange={handleChange}
          >
            {imageUrl ? <img src={imageUrl} alt="avatar" style={{ width: '100%' }} /> : <Icon type={loading ? 'loading' : 'plus'} />
            }
          </Upload>
        </Col>
        <Col span={8}>
          <Label title="考生编号：">
            {getFieldDecorator('examineeId', { initialValue: examineeData.examineeId })(<Input  disabled/>)}
          </Label>
          <Label title="考生座位：">
            {getFieldDecorator('seatNo', { initialValue: examineeData.seatNo })(<Input />)}
          </Label>
          <Label title="考生性别：">
            {getFieldDecorator('sex', { initialValue: examineeData.sex,
            rules: [
                {
                  required: true,
                  message: '请输入考生性别'
                }]
             })(<Radio.Group options={radioOptions} />)}
          </Label>
          <Label title="考场教室 ：">
            {getFieldDecorator('examNumberBrief', {initialValue: fiterSelectData})(     
           (
            //  {console.log(examSiteSelectData)}
              <TreeSelect
              {...tProps}
              >
                { !!examSiteSelectData.length && examSiteSelectData.map(item => (
                  <TreeNode value={item.siteName} title={item.siteName} key={item.siteId}>
                    {
                      !!item.examNumber&&!!item.examNumber.length && item.examNumber.map((childrenItem, index) => {
                      return childrenTree(childrenItem, index)
                    })
                    }
                  </TreeNode>
                ))}
              </TreeSelect>
            )
            )}
          </Label>
        </Col>
        <Col span={8}>
          <Label title="考生姓名:">
            {getFieldDecorator('name', { initialValue: examineeData.name })(<Input />)}
          </Label>
          <Label title="身份证： ">
            {getFieldDecorator('idCard', { initialValue: examineeData.idCard })(<Input />)}
          </Label>
          <Label title="手机号： ">
            {getFieldDecorator('phone', { initialValue: examineeData.phone })(<Input />)}
          </Label>
        </Col>
      </Row>
      <hr />
      <Row justify="center" type="flex">
        <Col span={3}>
          <Button type="primary" htmlType="submit">
            保 存
          </Button>
        </Col>
      </Row>
    </Form>
  )
}

const Wrap = Form.create()(WrapForm)
function EditorExaminee(props) {

  return (
    <Dialog title="编辑考生" {...props} footer={null}>
      <Wrap {...props} />
    </Dialog>
  )
}
EditorExaminee.defaultProps = {
  width: "900px"
}
export default withLazy(EditorExaminee)