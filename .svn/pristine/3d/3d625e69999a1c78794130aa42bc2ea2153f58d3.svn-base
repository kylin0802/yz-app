import React from 'react' 
import Form from '@/components/Form'
import Dialog, {withLazy} from '@/components/Dialog'
import {Input,Button,Row,Message} from 'antd'
import fetch from '@/services/axios';
import { get, isFunction } from 'lodash'
import Styles from './index.module.less'
import {uuid} from '@/utils/filter'

const Label = ({ title, children }) => {
  return (
    <Form.Item className="headerSearch-page-search-label">
      <label className="headerSearch-page-search-label-item">{title}：</label>
      <span className="headerSearch-page-search-label-span">{children}</span>
    </Form.Item>
  )
}

const WrapForm = props => {
  const { getFieldDecorator, validateFields, } = props.form
  const {API,onCancel,onReload} = props

    const handleSubmit = e => { 
      e.preventDefault();
    //   const {onAddExamineeInfo} = props
      validateFields((err, values) => {
        if (!err) {
          // console.log('values', values)
          let examparam={
            "siteId":localStorage.getItem('siteId'),
             examRoom:{
              "examRoomId":uuid(),
              "name":values.name
             }
          }
          // console.log('adqwq',examparam)
          requestAddExam(examparam)
        }
      })
    }
const requestAddExam = (param) =>{
   fetch.post(API,param).then(res =>{
       if(get(res,'state')===10000){
        // console.log('success',res)
        Message.success(res.message)
        onCancel()
        isFunction(onReload) &&  onReload()
        reset()
       }
     
   })
}

    const reset = () => {//重置
      const { resetFields } = props.form   
      resetFields();
    }
    return (
      <Form onSubmit={handleSubmit}>
        <Row>
       
          <Label title="教室名称">
              {getFieldDecorator('name',
                {
                  rules: [{ required: true, message: '教室名称不能为空！' }],
                }
              )(<Input className={Styles.width} placeholder='请输入教室名称'/>)
              }
            </Label>
        
        </Row>
        <Row className={Styles.textAlign}>
          <Button type="dashed" className={Styles.marRight} onClick={reset}>重置</Button>
          <Button type="primary" htmlType="submit">确定</Button>
        </Row>
      </Form>
    )
  }
  const Wrap = Form.create()(WrapForm) // 外层嵌套
  
  const AddExamRoom = props => {
    return (<Dialog title="添加教室" {...props} footer={null}>
      <Wrap {...props}></Wrap>
    </Dialog>)
  }
  
  AddExamRoom.defaultProps = {
    width: '500px'
  }
  
  export default withLazy(AddExamRoom)