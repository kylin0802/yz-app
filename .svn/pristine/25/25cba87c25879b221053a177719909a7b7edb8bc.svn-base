import React, { useState, useEffect, useContext } from 'react'
import { Table, Button, message } from 'antd'
import Search from './components/Search'
import { get } from 'lodash'
import fetch from '@/services/axios';
import SockJS from 'sockjs-client'
import Stomp from 'stompjs'
// import { myContext } from '@/useReducer'


import ExamineeDetail from './components/ExamineeDetail'
import AddExaminee from './components/AddExaminee'
import EditorExaminee from './components/EditorExaminee'
import DeleteDialog from './components/DeleteDialog'
import UploadExaminee from './components/UploadExaminee'
import MessageIndex from './components/MessageIndex'
import './index.less'


import {  EXAMINEE_LIST_API,
          EXAMINEEE_ADD_API,
          EXAMINEE_SELECT_API,
          EXAMINEE_DELETE_API, 
          EXAMINEE_EDITOR_API, 
          EXAMINEE_UPLOAD_API} from './apis'
export default props => {
  // const {state, dispatch} = useContext(myContext) // 挂载dispatch
  // console.log('props2', props)
  
  const [tableData, setTableData] = useState([]);
  const [paginationInfo, setPaginationInfo] = useState({ // 查询条件
    // examineeId:'',
    // examineeName: '',
    // examineeNumbeId: '',
    // seatNo: '',
    pageNumber: 1,
    pageSize: 100,
  })
  const [examSiteSelectData,setExamSiteSelectData] = useState([])
  const [visible, setVisible] =useState({
    isShow: false,
    values: null
  })
  const onHandleSearch = valueObj => {
    let param = { ...paginationInfo }
    let obj = { ...param, ...valueObj }
    requestExamineeList(obj)
  }
  const onClose = e =>{
    setVisible({
      isShow: false,
      values: null
    })
  }
  
  const requestExamineeList = (param = paginationInfo) => { // 数据列表
    setPaginationInfo(param)
    fetch.post(EXAMINEE_LIST_API, param).then(res => {
      if (get(res, 'state') === 10000) {
        
        setTableData(res.data.content)
      }
    })
  }
  const requestExamSiteSelectData = param => {
    fetch.post(EXAMINEE_SELECT_API, param={}).then(res => {
      if (get(res, 'state') === 10000) {
        setExamSiteSelectData(res.data.content)
      }
    })
  }

  useEffect(() => {// 生命周期
    requestExamineeList(paginationInfo)
    requestExamSiteSelectData(paginationInfo)
    // dispatch(
    //   {type: 'CLICK_ACYCN',
    //   payload: requestEamineeSelectData()})// dispacth 异步渲染
  }, [])

  useEffect(() => { // 开始
      let curWwwPath = window.document.location.href; //浏览器显示地址 http://10.15.5.83:5555/ISV/demo.aspx?a=1&b=2
      let pathname = window.document.location.pathname; //文件在服务器相对地址 /ISV/demo.aspx
      let pos = curWwwPath.indexOf(pathname);
      let serverPath = curWwwPath.substring(0, pos);
      if (serverPath === 'http:') {
        serverPath = 'http://192.168.1.231:8088'
      }
      let socket = new SockJS(serverPath + '/yzSmartGate/faceModelingReceiveServer')
      let stompClient = Stomp.over(socket)
      stompClient.connect({}, (frame)=> {
        console.log('连接成功-------', frame)
        stompClient.subscribe('/topic/examinessBatchAddResult', function (response) {
          let res = JSON.parse(response.body)
          let state = get(res, 'state')
          console.log('上传批量', res)
          if(state === -1) {
            message.error(res.message, 4)
            // dispatch(connectAction(res.message))
          } else if(state === 10000) {
            // const {data:{summary}, description} = res
            // message.info(summary+description)
            requestExamineeList()
            setVisible({
              isShow:true,
              values: res
            })
          }
      },)
      }, (error) => {
        console.log('断开重连')
      })
    return () => { //注销
      stompClient.disconnect()
    };
  }, [])

  const columns = [
    {
      key: 2,
      title: '座位号',
      dataIndex: 'seatNo'
    },
    {
      key: 3,
      title: '姓名',
      dataIndex: 'name'
    },
    {
      key: 4,
      title: '联系电话',
      dataIndex: 'phone'
    },
    {
      key: 5,
      title: '性别',
      dataIndex: 'sex'
    },
    {
      key: 6,
      title: '编号',
      dataIndex: 'examineeId'
    },
    {
      title: '操作',
      key: 'action',
      render: item => {
        return (
          <>
            <ExamineeDetail footer={null} examineeData={item}>
              <a className="details">详情 </a>
            </ExamineeDetail>
            |
            <DeleteDialog
            deleteApi={EXAMINEE_DELETE_API}
            prams={{ examineeId: item.examineeId }}
            onReload = {requestExamineeList}
            >
            <a className="examinee-page-list-delete"> 删除</a>
          </DeleteDialog>
          |

          <EditorExaminee
            examineeData ={item}
            examSiteSelectData={examSiteSelectData}
            onReload = {requestExamineeList}
            API={EXAMINEE_EDITOR_API}
          >
           <a> 编辑</a></EditorExaminee>
          </>
        );
      }
    }
  ];

  return (
    // 合理的表单写法
    <section className="examinee-page">
      <section className="examinee-page-header">
        <Search onHandleSearch={onHandleSearch} />
      </section>
      <section className="examinee-page-list">
        <section className="examinee-page-list-operation">
          <AddExaminee visible={false} isLazy={true} 
          examSiteSelectData={examSiteSelectData}
          onReload = {requestExamineeList}
          API={EXAMINEEE_ADD_API}
          >
          <Button icon="plus"  type="primary">考生添加</Button>
          </AddExaminee>
          <UploadExaminee uploadAPI = {EXAMINEE_UPLOAD_API} >
            <Button icon="upload">考生批量导入</Button>
            </UploadExaminee>
        </section>
        <section className="examinee-page-list-content">
          <Table columns={columns} dataSource={tableData} rowKey={record => record.personId}/>
        </section>
      </section>
      {visible.isShow && <MessageIndex visible={true} onClose= {onClose} isLazy={false} values ={ visible.values} />}
      <section className="examinee-page-footer"></section>

    </section>
  )
}